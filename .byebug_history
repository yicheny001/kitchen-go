exit
response.parsed_response.class
item
exit
response.parsed_response
parsed_response
response
parsed_response
exit
   18:     StoreItem.create(name: item["Itemname"], image: item["ItemImage"], description: item["ItemDescription"], price: item["Pricing"])response
response.parsed_response["ArrayOfProduct_Commercial"]["Product_Commercial"].each do |item|
exit
ingredients_items
exit
zipped
ingredients_items
exit
items.zip(@items).last
items.zip(@items).first
items.zip(@items)
items.zip(@items).flatten
zipped
exit
item_array
exit
continue
item
exit
@items
item
exit
@items.length
@items.last
@items = item_monster_array.map {|item_array| item_array.map {|item_hash| StoreItem.find_by(description: item_hash["ItemDescription"]) }}
@items = _
item_monster_array.map {|item_array| item_array.map {|item_hash| StoreItem.find_by(description: item_hash["ItemDescription"]) }}
item_monster_array.each {|item_array| item_array.map {|item_hash| StoreItem.find_by(description: item_hash["ItemDescription"]) }}
end
StoreItem.find_by(description: item_hash["ItemDescription"])
item_array.map do |item_hash|
item_monster_array.each do |item_array|
end
StoreItem.find_by(description: item_hash["ItemDescription"])
item_array.map do |item_hash|
item_monster_array.each do |item_array|
item_monster_array.map do |item_array|
item_monster_array
item_monster_array[2]
item_monster_array[0]
item_monster_array[3]
item_monster_array[4]
item_monster_array[3]
item_monster_array[1]
item_monster_array[0]
item_monster_array[0][3]
item_monster_array[0][2]
item_monster_array[0][1]
item_monster_array[0][0]
item_monster_array
item_hash
exit
item_monster_array.map {|item_hash| StoreItem.find_by(name: item_hash["ItemName"])}
item_monster_array.map {|item_hash| StoreItem.find_by(description: item_hash["ItemDescription"])}
item_monster_array.map {|item_hash| StoreItem.find_by(description: item_hash[
q
items.map {|item| adapter.get_store_items(store_object.storeID, item)}
exit
items.map {|item| adapter.get_store_items(store_object.storeID.to_i, item)}
items.map {|item| adapter.get_store_items(store_object.storeID, item)}
store_object
exit
@store
items.map {|item| adapter.get_store_items(@store["storeID"], item)}
items.map {|item| adapter.get_store_items(@store[storeID], item)}
items.map {|item| adapter.get_store_items(@store.storeID, item)}
items.map do |item|
exit
endex
adapter.get_store_items(@store.storeID, item)
@items.map do |item| 
items
exit
@store
exit
params[:zip]
params["zip]
params
exit
adapter.get_stores_by_zip(params[:zip])
adapter.find_close_storeid(params[:zip])
adapter = Services::SupermarketAdapter.new
adapter.find_close_storeid(params[:zip])
adapter = Services::SupermarketAdapter
Services::SupermarketAdapter.find_close_storeid(params[:zip])
params[:zip]
params
exit
response.parsed_response["ArrayOfStore"]["Store"][0]["Storename"]Q
response.parsed_response["ArrayOfStore"]["Store"][0]["Storename"]
response.parsed_response["ArrayOfStore"]["Store"]["Storename"]
response.parsed_response["ArrayOfStore"]["Store"]["Storename"+"State"]
response.parsed_response["ArrayOfStore"]["Store"]
response.parsed_response["ArrayOfStore"]["Store"]q
response.parsed_response["ArrayOfStore"]["Store"][0]
response.parsed_response["ArrayOfStore"]
response.parsed_response["ArrayOfStore]
response.parsed_response
response.parsed_response[0]
response
exit
@recipes
@recipe
recipe
exit
self.reviews
self
exit
params[:shopping_list][:line_items]
params
exit
Ingredient.find_by(name: hash[:name]).id
Ingredient.find_by(name: hash[:name])
hash
exit
params[:shopping_list][:ingredients_attributes].values
params[:shopping_list][:ingredients_attributes].keys
params[:shopping_list][:ingredients_attributes]
params[:ingredients_attributes]
session[:user_id]
params[:id]
params
exit
item.object
exit
params
exit
params
exit
params
exit
params
exit
@shopping_list_uniq.line_items.first.name
@shopping_list_uniq.line_items
@shopping_list_uniq
@shopping_list_distinct
exit
self.class.joins(:ingredients).group('ingredients.name').count('ingredients.name').keys
self.class.joins(:ingredients).group('ingredients.name').count('ingredients.name')
self.class.joins(:ingredients).group('ingredients.name')
self.ingredients.group('ingredients.name')
singles.length
singles
exit
singles
singles << ing
names.include? ing.name
ing.name
ing
exit
params
exit
session[:user_id]
sessions[:user_id]
params
exit
params
exit
params
exit
self.line_items.find_by(ingredient_id: item)
self.line_items
self.line_items.delete(ingredient_id: item)
self.line_items
item
exit
ingredients
exit
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name')
ingredients
exit
self.ingredients.destroy(item)
self.line_items.destroy(item)
self.line_items
item
exit
!item.empty?
!!item.empty?
item.empty?
item
continue
item
exit
end
params[:shopping_list][:ingredients]
params[:shopping_list]
params
exit
errors
params.errors
params
params[:shopping_list][:ingredients]
exit
params
params[:shopping_list][:ingredients]
exit
params[:shopping_list][:ingredients]
params[:shopping_list][:ingredients][:""]
params[:shopping_list][:ingredients]
params[:shopping_list]
params
exit
params[:shopping_list]
params
exit
b
f
b
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params[:shopping_list]
params[:ingredients_attributes]
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
continue
self.ingredients.exists?(name: "raddish")
self.ingredients.exists?(name: "vinegar")
self.ingredients
params
continue
